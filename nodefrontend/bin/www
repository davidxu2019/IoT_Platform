#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodefrontend:server');
var https = require('https');
var request = require('request');
var fs = require('fs'); 

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8433');
app.set('port', port);

var masterURL = 'https://cs219iotplatform.dynu.net:5433';
var registerToMasterRoute = '/register';
var highLevelDomain = '.dynu.net';
var curHostname = process.argv[2];

// exit if hostname of the server is not specified.
if (!curHostname) {
  console.error('Please specify the hostname for this slave');
  process.exit(1);
}

/**
 * Create HTTP server.
 */

var options = { 
    key: fs.readFileSync('key.pem'), 
    cert: fs.readFileSync('cert.pem'), 
    passphrase: "passphrase",
    requestCert: true, 
    rejectUnauthorized: true,
    ca: [ 
      // fs.readFileSync('system_test/application/cert.pem'),
      fs.readFileSync('../loadbalancer/cert.pem'),
    ],
}; 
var server = https.createServer(options, app);
server.listen(port, registerToMaster);

function registerToMaster() {
  let options = { 
    url: masterURL + registerToMasterRoute,
    method: 'POST', 
    json: true,
    key: fs.readFileSync('key.pem'),  
    cert: fs.readFileSync('cert.pem'), 
    passphrase: "passphrase",
    ca: [ 
      fs.readFileSync('../loadbalancer/cert.pem') // master cert
    ], 
    qs: {'hostname': curHostname + highLevelDomain},
  }; 
  request(options, function(err, res, body) {
    if (err) {
      console.log(err);
    } else if (res.statusCode >= 300) {
      console.log('status code is ' + res.statusCode);
      console.log(body);
    } else {
      console.log(body);
    }
  }); 
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
